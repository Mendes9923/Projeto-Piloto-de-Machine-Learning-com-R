install.packages(c("dplyr", "tidyverse", "caret", "recipes", "ggplot2",
"rpart", "e1071", "randomForest", "cluster",
"fpc", "arules", "mlr3"))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(tidyverse)
data <- iris
glimpse(data)
source("~/.active-rstudio-document", echo=TRUE)
library(caret)
preproc <- preProcess(data[, -5], method = c("center", "scale"))
scaled_data <- predict(preproc, data[, -5])
preproc <- preProcess(data[, -5], method = c("center", "scale"))
scaled_data <- predict(preproc, data[, -5])
library(rpart)
model <- rpart(Sepal.Length ~ ., data = data, method = "anova")
plot(model)
text(model)
modelo = rpart(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species ,data=iris)
modelo
summary(modelo)
library(rpart)
source("~/.active-rstudio-document", echo=TRUE)
model <- rpart(Sepal.Length ~ ., data = data, method = "anova")
plot(model)
text(model)
library(caret)
preproc <- preProcess(data[, -5], method = c("center", "scale"))
text(model)
library(e1071)
model_nb <- naiveBayes(Species ~ ., data = data)
predictions <- predict(model_nb, data)
table(Predicted = predictions, Actual = data$Species)
control <- rfeControl(functions = rfFuncs, method = "cv", number = 10)
results <- rfe(data[, -5], data$Species, sizes = c(1:4), rfeControl = control)
results
library(randomForest)
model_rf <- randomForest(Species ~ ., data = data, ntree = 100)
# K-means
kmeans_model <- kmeans(scaled_data, centers = 3)
# K-means
kmeans_model <- kmeans(scaled_data, centers = 3)
plot(data$Sepal.Length, data$Sepal.Width, col = kmeans_model$cluster)
library(arules)
transactions <- as(split(data$Species, data$Sepal.Length > 5), "transactions")
rules <- apriori(transactions, parameter = list(supp = 0.5, conf = 0.8))
inspect(rules)
# Função para carregar e explorar dados
load_and_explore <- function(filepath) {
data <- read.csv(filepath)
print(head(data))
print(summary(data))
return(data)
}
# Função para escalar variáveis numéricas
scale_features <- function(data, numeric_cols) {
library(caret)
preproc <- preProcess(data[, numeric_cols], method = c("center", "scale"))
scaled_data <- predict(preproc, data[, numeric_cols])
return(cbind(scaled_data, data[setdiff(names(data), numeric_cols)]))
}
# Função para carregar e explorar dados
load_and_explore <- function(filepath) {
data <- read.csv(filepath)
print(head(data))
print(summary(data))
return(data)
}
# Introdução
Este relatório documenta o uso de técnicas de Machine Learning em R.
## Carregamento e Exploração dos Dados
```{r setup, echo=TRUE}
library(tidyverse)
data <- iris
summary(data)
# Função para carregar e explorar dados
load_and_explore <- function(filepath) {
data <- read.csv(filepath)
print(head(data))
print(summary(data))
return(data)
}
source("data_preprocessing.R")
scaled_data <- scale_features(data, c("Sepal.Length", "Sepal.Width"))
head(scaled_data)
source("model_training.R")
model <- train_decision_tree(scaled_data, "Species")
summary(model)
library(ggplot2)
ggplot(data, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point()
